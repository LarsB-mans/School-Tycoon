<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ChalkboardDescription" xml:space="preserve">
    <value>A must-have for any classroom. In fact, it wouldn't even be a classroom without one of these; it would be just a room. The meager writing space leaves something to be desired.</value>
  </data>
  <data name="ChalkboardName" xml:space="preserve">
    <value>Chalkboard</value>
  </data>
  <data name="ClassroomBuilderCosts" xml:space="preserve">
    <value>Costs: €{0}</value>
  </data>
  <data name="ClassroomBuilderTime" xml:space="preserve">
    <value>Building time: {0} days</value>
  </data>
  <data name="ClassroomLargeDescription" xml:space="preserve">
    <value>A vast classroom with ample space for roughly 48 pupils. In addition to a dedicated group activity area, there is a technology corner that can be used as a laboratory or computer facility.</value>
  </data>
  <data name="ClassroomLargeName" xml:space="preserve">
    <value>Classroom (Large)</value>
  </data>
  <data name="ClassroomMediumDescription" xml:space="preserve">
    <value>An elongated classroom with room for 36 pupils. The extra space in the back allows for groups of 4 tables, so-called 'islands', to be put together for a more pleasant learning environment.</value>
  </data>
  <data name="ClassroomMediumName" xml:space="preserve">
    <value>Classroom (Medium)</value>
  </data>
  <data name="ClassroomSmallDescription" xml:space="preserve">
    <value>A compact classroom that can accommodate up to 24 pupils. There is just enough room for a blackboard and some cupboards. Can be used for all subjects, but not very suitable for group activities.</value>
  </data>
  <data name="ClassroomSmallName" xml:space="preserve">
    <value>Classroom (Small)</value>
  </data>
  <data name="DateFormat" xml:space="preserve">
    <value>{0} {1}{2}, year {3}</value>
    <comment>{0} = Month Name, {1} = Day Number, {2} = Day Number Suffix, {3} = Year Number</comment>
  </data>
  <data name="DoubleChalkboardDescription" xml:space="preserve">
    <value>A chalkboard that you can fold open for extra writing space. This lets you re-use images for another lesson and write down walls of text.</value>
  </data>
  <data name="DoubleChalkboardName" xml:space="preserve">
    <value>Double Chalkboard</value>
  </data>
  <data name="DoubleWhiteboardDescription" xml:space="preserve">
    <value>A super-long whiteboard with ample writing space. It can be folded to provide additional room, or to cover up embarrasingly bad diagrams.</value>
  </data>
  <data name="DoubleWhiteboardName" xml:space="preserve">
    <value>Double Whiteboard</value>
  </data>
  <data name="InteractiveWhiteboardDescription" xml:space="preserve">
    <value>A shockingly useful giant touch screen hooked up to a computer, to be used for displaying web pages and images, or playing this game.</value>
  </data>
  <data name="InteractiveWhiteboardName" xml:space="preserve">
    <value>Interactive Whiteboard</value>
  </data>
  <data name="RockSlateDescription" xml:space="preserve">
    <value>It's a rock. You chisel stuff on it. Not much else to say.

By the way, it doesn't come with a chisel.</value>
  </data>
  <data name="RockSlateName" xml:space="preserve">
    <value>Rock Slate</value>
  </data>
  <data name="WhiteboardDescription" xml:space="preserve">
    <value>Like a chalkboard, except it uses ink instead of chalk. Perfect for colourful graphs, tables and pictures of dinosaurs, but you can't fit many of them on it.</value>
  </data>
  <data name="WhiteboardName" xml:space="preserve">
    <value>Whiteboard</value>
  </data>
</root>